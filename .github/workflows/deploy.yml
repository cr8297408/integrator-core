name: staging-deploy

concurrency: staging

on:
  push:
    branches:
      - master

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install
        run: |
          npm ci

      - uses: actions/cache@v4
        name: Setup cache
        with:
          path: node_modules
          key: ${{ runner.os }}-pr-validation-${{ hashFiles('package-lock.json') }}

  build:
    needs: [install]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        name: Setup cache
        with:
          path: node_modules
          key: ${{ runner.os }}-pr-validation-${{ hashFiles('package-lock.json') }}

      - name: Build
        run: npm run build

      - name: Prune
        run: npm prune --production

      - uses: actions/cache@v4
        name: Setup cache
        with:
          path: |
            node_modules
            dist
            package.json
            package-lock.json
          key: ${{ runner.os }}-build-package-${{ github.sha }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        name: Setup cache
        with:
          path: |
            node_modules
            dist
            package.json
            package-lock.json
          key: ${{ runner.os }}-build-package-${{ github.sha }}

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create env file
        run: |
          echo "ENVIRONMENT=staging" >> .env
          echo "REGION_AWS=${{ secrets.AWS_REGION }}" >> .env
          echo "SECRET_NAME_AWS=${{ secrets.SECRET_NAME_AWS }}" >> .env


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Terraform init
        run: terraform init
        working-directory: ./terraform/staging

      - name: Terraform Set variables
        run: |
          echo 'aws_account="${{ secrets.AWS_ACCOUNT_ID }}"' >> ./terraform.tfvars
          echo 'aws_region="${{ secrets.AWS_REGION }}"' >> ./terraform.tfvars
        working-directory: ./terraform/staging

      - uses: actions/cache@v4
        name: Setup cache
        with:
          path: node_modules
          key: ${{ runner.os }}-pr-validation-${{ hashFiles('package-lock.json') }}
      - name: Terraform apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/staging

  clean:
    needs: [build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "List caches"
          gh actions-cache list -R ${{ github.repository }} -B develop
          echo "Deleting caches..."
          gh actions-cache delete ${{ runner.os }}-build-package-${{ github.sha }} -R ${{ github.repository }} -B develop --confirm
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.PIPELINE_TOKEN }}
